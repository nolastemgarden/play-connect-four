{"version":3,"sources":["components/Navbar.js","components/ModesOfPlay.js","pages/WelcomePage.js","components/Circle.js","components/Square.js","components/Column.js","components/Board.js","components/Panel.js","pages/ClassicGame.js","pages/MultiplicationGame.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","navbar","width","backgroundColor","palette","primary","main","display","flexDirection","justifyContent","color","navbarContainer","brandName","menuButton","common","white","Navbar","props","classes","AppBar","position","className","elevation","Container","maxWidth","Typography","variant","pageTitle","SimpleMenu","React","useState","anchorEl","setAnchorEl","handleClose","Button","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","component","RouterLink","to","root","header","padding","paragraph","paddingBottom","paddingLeft","ModesOfPlay","Fragment","gutterBottom","height","alignItems","paper","justifySelf","marginTop","panel","expansionDetail","textIndent","buttonArea","margin","WelcomePage","expanded","setExpanded","handleChange","isExpanded","Paper","Box","ExpansionPanel","onChange","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","Circle","status","square","Square","squareStatus","key","column","Column","colNumber","columnStatus","row","length","squareId","concat","handleClick","board","border","Board","columnHeight","boardStatus","console","warn","validateBoardStatus","Array","fill","columnCount","getColumnStatus","handleColumnClick","Panel","gameOver","playerOneToMove","gameStatus","undoButton","button","handleUndoButtonClick","buttonIcon","newGameButton","handleNewGameButtonClick","statusDisplay","ClassicGame","lineIdToSquareIdsMap","completeMap","Map","verticalLineMap","map","currentLineId","squaresPerCol","isStartOfVerticalLine","squaresInLine","set","horizontalLineMap","linesPerCol","isStartOfHorizontalLine","upslashLineMap","numberOfVerticalLines","isStartOfUpslashLine","downslashLineMap","isStartOfDownslashLine","forEach","partialMap","squareIdList","lineId","getLineIdToSquareIdsMap","squareIdToLineIdsMap","squaresToLinesMap","squaresList","get","getSquareIdToLineIdsMap","statusOnTurnZero","lineStatusMap","initialLineStatusMap","currentTurnNumber","setCurrentTurnNumber","history","setHistory","getRowBySquareId","Math","floor","isEndOfVerticalLine","fromSquareId","toSquareId","slice","getBoardStatus","moveList","turnNumber","splice","getLineStatusMap","updatedMoveList","error","previousLineStatusMap","updatedLineStatusMap","mostRecentPlayer","mostRecentSquareClaimed","updatedLineStatus","previousLineStatus","playerOne","playerTwo","empty","log","currentBoardStatus","currentTurnStatus","moveToAdd","colStatus","lowestEmptyRow","indexOf","lowestEmptySquare","lowestEmptySquareInCol","object","updatedTurnNumber","updatedGameStatus","playerOnesMoveCounts","lineStatus","includes","playerOneWins","playerTwosMoveCounts","playerTwoWins","gameDrawn","getGameStatus","newTurnStatus","MultiplicationGame","createMuiTheme","light","dark","player1","red","player2","yellow","danger","shape","borderRadius","responsiveFontSizes","minHeight","minWidth","App","useEffect","CssBaseline","ThemeProvider","exact","path","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ecd4a851.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Link as RouterLink,\r\n} from \"react-router-dom\";\r\n\r\n// Image Imports\r\n// import logo from \"../images/nsgLogo100px.png\";\r\n\r\n// CUSTOM COMPONENTS\r\n\r\n\r\n// MATERIAL-UI COMPONENTS\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\n// MATERIAL-UI ICONS\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { findAllByPlaceholderText } from '@testing-library/react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navbar: {\r\n        width: '100vw',\r\n        backgroundColor: theme.palette.primary.main, // Matches Logo Background\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        color: '#fff',\r\n    },\r\n    navbarContainer: {\r\n        width: '100vw',\r\n        backgroundColor: theme.palette.primary.main, // Matches Logo Background\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between'\r\n\r\n    },\r\n    brandName: {\r\n\r\n    },\r\n    menuButton: {\r\n        color: theme.palette.common.white\r\n    }\r\n\r\n}));\r\n\r\nexport default function Navbar(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <AppBar\r\n            position=\"sticky\"\r\n            className={classes.navbar}\r\n            elevation={2}\r\n        >\r\n            <Container className={classes.navbarContainer} maxWidth='md'>\r\n\r\n                <Typography\r\n                    className={classes.brandName}\r\n                    variant='h4'\r\n                >\r\n                    {props.pageTitle}\r\n                </Typography>\r\n\r\n                <SimpleMenu  />\r\n\r\n            </Container>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\n\r\n\r\nfunction SimpleMenu() {\r\n    const classes = useStyles();\r\n    \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button \r\n                className={classes.menuButton} \r\n                aria-controls=\"simple-menu\" \r\n                aria-haspopup=\"true\" \r\n                onClick={handleClick}\r\n            >\r\n                <MenuIcon />\r\n            </Button>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem \r\n                    onClick={handleClose}\r\n                    component={RouterLink}\r\n                    to='/'\r\n                >\r\n                    Welcome Page\r\n                </MenuItem>\r\n\r\n                <MenuItem \r\n                    onClick={handleClose}\r\n                    component={RouterLink}\r\n                    to='/classic_mode'\r\n                >\r\n                    Play in Classic Mode\r\n                </MenuItem>\r\n\r\n                <MenuItem \r\n                    onClick={handleClose}\r\n                    component={RouterLink}\r\n                    to='/multiplication_mode'\r\n                >\r\n                    Play with Math Fact Practice\r\n                </MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\n// My Components\r\n\r\n// MUI  components\r\n// import Paper from '@material-ui/core/Paper';\r\n// import Box from '@material-ui/core/Box';\r\n// import Container from '@material-ui/core/Container';\r\n// import Button from '@material-ui/core/Button';\r\n// import Menu from '@material-ui/core/Menu';\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n// import AppBar from '@material-ui/core/AppBar'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n// import ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\n// import ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\n// import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        \r\n    },\r\n    header: {\r\n        padding: '16px',\r\n    },\r\n    paragraph: {\r\n        paddingBottom: '8px',\r\n        paddingLeft: '16px',\r\n    },\r\n\r\n\r\n}));\r\n\r\n\r\nexport default function ModesOfPlay() {\r\n    const classes = useStyles();\r\n    \r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Typography variant='h5' className={classes.header} gutterBottom >\r\n                Classic Mode\r\n            </Typography>\r\n            <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                Connect Four is a turn-based strategy game for two players.  The board is a grid with 6 rows and 7 columns.  Players take turns adding a chip of their color to the board and chips always ‘fall’ to the lowest empty row in the selected column.  Both players have the same goal: Get four chips of their color in a row.  Winning four-in-a-rows may be vertical, horizontal, or diagonal.\r\n            </Typography>\r\n            <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                To make a move in the classic version, simply click on the column where you want to move.  If you are unfamiliar with the game, this is a good place to start.  Once you understand the mechanics of the game, move on to one of the versions where math fact practice is integrated.\r\n            </Typography>\r\n\r\n\r\n            <Typography variant='h5' className={classes.header} gutterBottom >\r\n                Multiplication Practice Mode\r\n            </Typography>\r\n            <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                In this version of the game, each row and column is assigned a number and each square on the board has a value that is the product of its row and column numbers.  Instead of clicking on the board to make a move, players must determine the product of the row and column where they wish to move and then enter that number in a text input field.\r\n            </Typography>\r\n            <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                If the number entered corresponds to one of the squares that is currently the lowest empty square in its column, then the move is made successfully and it becomes the other player's turn.                        </Typography>\r\n            <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                If the number entered <em><strong>does not</strong></em> correspond to one of the squares that is currently the lowest empty square in its column, then no move is made and the player who entered an invalid number loses their turn.\r\n            </Typography>\r\n            <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                By default, the game uses row and column numbers that are especially common in real world applications but you may use the game settings to choose numbers that your students especially need to practice with.\r\n            </Typography>\r\n\r\n            <Typography variant='h5' className={classes.header} gutterBottom >\r\n                Division Practice  Mode\r\n            </Typography>\r\n            <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                This version has not been created yet.\r\n            </Typography>\r\n\r\n            <Typography variant='h5' className={classes.header} gutterBottom >\r\n                Rules of Exponents  Mode\r\n            </Typography>\r\n            <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                This version has not been created yet.\r\n            </Typography>\r\n\r\n        </React.Fragment>\r\n    );\r\n}","import React from 'react';\r\nimport {\r\n    Link as RouterLink,\r\n} from \"react-router-dom\";\r\n\r\n// My Components\r\nimport Navbar from '../components/Navbar';\r\nimport ModesOfPlay from \"../components/ModesOfPlay\";\r\n\r\n// MUI  components\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box'; \r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        // backgroundColor: '#4AC9FD',\r\n        // overflow: 'scroll',\r\n    },\r\n    paper: {\r\n        justifySelf: 'center',\r\n        width: '100%',\r\n        height: 'auto',\r\n        // backgroundColor: theme.palette.primary.light,\r\n        backgroundColor: theme.palette.common.white,\r\n        marginTop: '1.5rem',\r\n    },\r\n    header: {\r\n        padding: '16px',\r\n    },\r\n    panel: {\r\n        width: '100%',\r\n    },\r\n    expansionDetail: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    paragraph: {\r\n        textIndent: '2rem',\r\n        paddingBottom: '1rem',\r\n    },\r\n    buttonArea: {\r\n        // border: 'solid red 1px',\r\n        margin: 'auto',\r\n        width: '70%',\r\n        padding: '16px',\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    }\r\n\r\n}));\r\n\r\n\r\nexport default function WelcomePage() {\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n    \r\n    // What distinguishes Math from Science?\r\n    //    sci... Math...\r\n    //  Bottom Line: Proof vs evidence. \r\n    // What does Tic Tac Toe have to do with this?\r\n    // --play now button\r\n    // What is the Fifteen Game?\r\n    \r\n    return (\r\n        <Container \r\n            className={classes.root} \r\n            maxWidth='md'\r\n        >\r\n            <Navbar pageTitle={\"Play Connect Four\"} />\r\n\r\n            \r\n            \r\n            \r\n            <Paper className={classes.paper} >\r\n                <Box className={classes.header}  >\r\n                    <Typography variant='h6' >\r\n                        {/* Welcome to my free version of the classic game Connect Four. <br /> */}\r\n                    </Typography>\r\n                    <Typography variant='h6' gutterBottom>\r\n                        Welcome to my free version of the classic game Connect Four. <br />\r\n                        My name is Nigel Wilson, and I am a math teacher with a passion for games where simple rules lead to complex strategies.\r\n                </Typography>\r\n                </Box>\r\n                \r\n                {/* What Inspired Me to Create this Game? */}\r\n                <ExpansionPanel\r\n                    className={classes.panel}\r\n                    expanded={expanded === 'panel1'}\r\n                    onChange={handleChange('panel1')}>\r\n                    <ExpansionPanelSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1bh-content\"\r\n                        id=\"panel1bh-header\"\r\n                    >\r\n                        <Typography variant='h4'  >\r\n                            What inspired me to create this game?\r\n                        </Typography>\r\n                    </ExpansionPanelSummary>\r\n                    <ExpansionPanelDetails className={classes.expansionDetail}>\r\n                        \r\n                        <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                            In 2018, I was working as a math teacher with an afterschool program in New Orleans called College Track.  Our mission was to help kids from low-income households reach their goal of being first-generation college grads.  Many of the kids complained about the number of boring and tedious worksheets that they were expected to do to practice the math skills they would need on the ACT.  My objective in creating the first version of this game was to make practicing the rules of exponents more fun and engaging.  \r\n                        </Typography>\r\n                        <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                            I worked with the students to build a wooden grid that could be hung at the front of the classroom and a set of laminated squares of paper that each had a question printed on it.  After a lesson on how exponents work, students formed two teams and practiced what they had learned through a friendly competition.  The game was very popular and the students requested that I make more versions of it so that they could use the connect four grid to practice more than just the rules of exponents.                        \r\n                        </Typography>\r\n                        <Typography variant='body1' className={classes.paragraph} gutterBottom >\r\n                            Their enthusiasm pleased me, but making the laminated cards was very time consuming and imposed the limitation that the game could only be used by one class at a time.  I want the work that I do as a teacher to have the broadest impact possible, so making something that can only be used by one class at a time is not ideal.  Around that time, I was getting started teaching myself to program in my spare time and it dawned on me that making a Web-app version of this game would be good programming practice and also enable the game to be played by more students.  \r\n                        </Typography>\r\n                          \r\n                    </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n\r\n\r\n                {/* What are the different modes I can play in? */}\r\n                <ExpansionPanel\r\n                    className={classes.panel}\r\n                    expanded={expanded === 'panel3'}\r\n                    onChange={handleChange('panel3')}>\r\n                    <ExpansionPanelSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel3bh-content\"\r\n                        id=\"panel3bh-header\"\r\n                    >\r\n                        <Typography variant='h4'  >\r\n                            What are the different modes I can play in?\r\n                        </Typography>\r\n                    </ExpansionPanelSummary>\r\n                    <ExpansionPanelDetails className={classes.expansionDetail}>\r\n                        \r\n                        <ModesOfPlay />\r\n                        \r\n                    </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n                \r\n\r\n                <Box className={classes.buttonArea}>\r\n                    <Button \r\n                        variant=\"contained\" \r\n                        color=\"primary\" \r\n                        component={RouterLink}\r\n                        to='/classic_mode'\r\n                    >\r\n                        Play Classic Mode!\r\n                    </Button>\r\n                    \r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to='//multiplication_mode'\r\n                    >\r\n                        Play with Multiplication Practice\r\n                    </Button>\r\n\r\n                </Box>\r\n                \r\n              \r\n                \r\n\r\n                \r\n                \r\n            </Paper>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\r\n\r\n// My Styling\r\nimport '../App.css';\r\n\r\n// My Components\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nexport default function Circle(props) {\r\n    const status = props.status;\r\n\r\n    return (\r\n        <Box className={`circle ${status}`} />\r\n    )\r\n}","import React from 'react';\r\n\r\n// My Styling\r\n// import '../App.css';\r\n\r\n// My Components\r\nimport Circle from \"./Circle\";\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    square: {\r\n        width: '100px',\r\n        height: '100px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n}));\r\n\r\n\r\nexport default function Square(props) {\r\n    const classes = useStyles();\r\n    const status = props.squareStatus;\r\n\r\n    // console.log(\"Square passes status to Circle: \" + props.status);    // Status may be 'red' 'yellow' or 'open'\r\n    return (\r\n        <Box\r\n            key={props.id}\r\n            className={classes.square}\r\n        >\r\n            <Circle status={status} />\r\n        </Box>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\n// My Styling\r\n\r\n// My Components\r\nimport Square from \"../components/Square\";\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    column: {\r\n        // border: 'solid green 1px',\r\n        display: 'flex',\r\n        flexDirection: 'column-reverse',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\n\r\nexport default function Column(props) {\r\n    const classes = useStyles();\r\n    const colNumber = props.colNumber;\r\n    const columnStatus = props.columnStatus;\r\n\r\n    let column = [];\r\n    for (let row = 0; row < columnStatus.length; row++) {\r\n        // const squareId = squaresPerColumn * colNumber + row;\r\n        const squareId = row;\r\n        let square =\r\n            <Square\r\n                id={squareId}\r\n                key={squareId}\r\n                squareStatus={columnStatus[row]}\r\n\r\n            />\r\n        column = column.concat(square)\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            className={classes.column}\r\n            key={colNumber}\r\n            onClick={() => props.handleClick(colNumber)}\r\n        \r\n        >\r\n\r\n            {column}\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\n\r\n// My Styling\r\n\r\n// My Components\r\nimport Column from \"../components/Column\";\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    board: {\r\n        border: 'solid red 1px',\r\n        margin: '2rem',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\n\r\n// The Board takes data on 42 squares and renders a collection of 7 Columns.\r\nexport default function Board(props) {\r\n    const classes = useStyles();\r\n    \r\n    const columnHeight = props.columnHeight;\r\n    const boardStatus = (validateBoardStatus(props.boardStatus, columnHeight) === 0 ) ? props.boardStatus : Array(42).fill('empty');\r\n    const columnCount = (boardStatus.length / columnHeight)\r\n\r\n    let getColumnStatus = props.getColumnStatus;\r\n    \r\n    let board = [];\r\n    for (let colNumber = 0; colNumber < columnCount; colNumber++) {\r\n        // const startIndex = (colNumber * columnHeight);\r\n        // const endIndex = ((colNumber + 1) * columnHeight);\r\n        // const columnStatus = boardStatus.slice(startIndex, endIndex);\r\n        let columnStatus = getColumnStatus(colNumber, boardStatus);\r\n        \r\n        let column =\r\n            <Column\r\n                key={colNumber}\r\n                colNumber={colNumber}\r\n                columnStatus={columnStatus}\r\n                handleClick={props.handleColumnClick}\r\n            />;\r\n\r\n        board = board.concat(column);\r\n    }\r\n\r\n    return (\r\n        <Box className={classes.board} >\r\n            {board}\r\n        </Box>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction validateBoardStatus(boardStatus, columnHeight) {\r\n    if (boardStatus.length !== 42) {\r\n        console.warn(`Rendering Board with number of squares NOT equal to 42. It is ${boardStatus.length}`);\r\n        return 1;\r\n    }\r\n    if (boardStatus.length % columnHeight !== 0) {\r\n        console.warn('Rendering Board with number of squares NOT divisible by column height.');\r\n        return 1;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}","import React from 'react';\r\n\r\n// My Styling\r\n\r\n// My Components\r\n\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    panel: {\r\n        border: 'solid red 1px',\r\n        width: '90%',\r\n        height: '150px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\n\r\n// The Panel takes data the status of the Game that is computed by the Game compnents and displays it to the user.\r\nexport default function Panel(props) {\r\n    const classes = useStyles();\r\n\r\n    const gameOver = props.gameOver;\r\n    const playerOneToMove = props.playerOneToMove;\r\n\r\n\r\n    let status = props.gameStatus;\r\n\r\n\r\n    const undoButton = (\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => props.handleUndoButtonClick()}\r\n\r\n        >\r\n        <UndoIcon className={classes.buttonIcon} />\r\n            Undo\r\n        </Button>\r\n\r\n\r\n    );\r\n\r\n    const newGameButton = (\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => props.handleNewGameButtonClick()}\r\n        >\r\n            <ReplayIcon className={classes.buttonIcon} />\r\n            New&nbsp;Game\r\n        </Button>\r\n    );\r\n    \r\n    // let circle;\r\n    // let text;\r\n    // if (status === 'red') {\r\n    //     circle = <Circle color={'red'} id={'1'} />;\r\n    //     text = 'TO MOVE.';\r\n    // } else if (status === 'yellow') {\r\n    //     circle = <Circle color={'yellow'} id={'1'} />;\r\n    //     text = 'TO MOVE.';\r\n    // } else if (status === 'redWon') {\r\n    //     circle = <Circle color={'red'} id={'1'} />;\r\n    //     text = 'WINS!';\r\n    // } else if (status === 'yellowWon') {\r\n    //     circle = <Circle color={'yellow'} id={'1'} />;\r\n    //     text = 'WINS!';\r\n    // } else if (status === 'draw') {\r\n    //     circle = <Circle color={'open'} id={'1'} />;\r\n    //     text = 'Game Over. Draw.';\r\n    // } else {\r\n    //     console.log('error in Info Component circle getter.')\r\n    // }\r\n\r\n    const panel = \r\n        <Box className={classes.statusDisplay}>\r\n            {/* <span className={classes.infoCircle}>\r\n                {circle}\r\n            </span>\r\n            <h1>{text}</h1> */}\r\n            {status}\r\n            {undoButton}\r\n            {newGameButton}\r\n        </Box>\r\n    \r\n\r\n    return (\r\n        <Box className={classes.panel} >\r\n            {panel}\r\n        </Box>\r\n    );\r\n\r\n}\r\n\r\n\r\n// function validateBoardStatus(boardStatus, columnHeight) {\r\n//     if (boardStatus.length !== 42) {\r\n//         console.warn('Rendering Board with number of squares NOT equal to 42.');\r\n//         return 1;\r\n//     }\r\n//     if (boardStatus.length % columnHeight !== 0) {\r\n//         console.warn('Rendering Board with number of squares NOT divisible by column height.');\r\n//         return 1;\r\n//     }\r\n//     else {\r\n//         return 0;\r\n//     }\r\n// }","import React, { useState } from 'react';\r\n\r\n// My Styling\r\nimport '../App.css';\r\n\r\n// My Components\r\nimport Board from '../components/Board'\r\nimport Panel from \"../components/Panel\";\r\n\r\nimport Navbar from '../components/Navbar';\r\n\r\n// MUI  components\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n        // backgroundColor: '#4AC9FD',\r\n        // overflow: 'scroll',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        height: 'auto',\r\n        // backgroundColor: theme.palette.primary.light,\r\n        backgroundColor: theme.palette.common.white,\r\n        marginTop: '1.5rem',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n}));\r\n\r\n\r\nexport default function ClassicGame() {\r\n    const classes = useStyles();\r\n\r\n    // Game Constants\r\n    const squaresPerCol = 6;\r\n    const squaresPerRow = 7;\r\n    let totalSquares = squaresPerCol * squaresPerRow;\r\n\r\n        // A \"Line\" is defined as an Array of four squareIds that together constitute a win. \r\n        // There are four 'types' of Line: 'vertical', 'horizontal', 'upslash', 'downslash'\r\n        // Each Line has a unique id. Id's are unique even across types, are consecutive, and 0-indexed . \r\n\r\n    let linesPerCol = (squaresPerCol - 4 >= 0) ? (squaresPerCol - 3) : 0;\r\n    let linesPerRow = (squaresPerRow - 4 >= 0) ? (squaresPerRow - 3) : 0;\r\n    \r\n    let numberOfVerticalLines = linesPerCol * squaresPerRow;\r\n    let numberOfHorizontalLines = linesPerRow * squaresPerCol;\r\n    let numberOfUpslashLines = linesPerCol * linesPerRow;\r\n    let numberOfDownslashLines = linesPerCol * linesPerRow;\r\n    let totalNumberOfLines = numberOfVerticalLines + numberOfHorizontalLines + numberOfUpslashLines + numberOfDownslashLines;\r\n    \r\n    const lineIdToSquareIdsMap = getLineIdToSquareIdsMap();     // The linesToSquaresMap has one Key:Value pair for each lineId to a four-element array containing the squareIds that make up that line.\r\n    const squareIdToLineIdsMap = getSquareIdToLineIdsMap();     // The squaresToLinesMap has one Key:Value pair mapping each squareId to an array of the Lines that include that squarre. In classic 6x7 game this is at least 3 and at most 13 lines.\r\n\r\n    \r\n    // STATE INITIALIZING and UPDATING helpers\r\n    let newGameMoveList = Array(0);\r\n    let statusOnTurnZero = {\r\n        \"turnNumber\": 0,\r\n        \"moveList\": newGameMoveList,\r\n        \"boardStatus\": Array(totalSquares).fill('empty'),\r\n        \"lineStatusMap\": initialLineStatusMap(),\r\n        \"gameStatus\": 'playerOneToMove'\r\n    }\r\n    \r\n    // GAME'S STATE\r\n    let [currentTurnNumber, setCurrentTurnNumber] = useState(0);  // Use the \"turnStatus\" Object stored at this index in the history Array.\r\n    let [history, setHistory] = useState([statusOnTurnZero]); \r\n\r\n    \r\n    // LOWEST LEVEL SQUARE-ROW-COL HELPERS\r\n    function getRowBySquareId(id) {\r\n        return (id % squaresPerCol);\r\n    }\r\n    function getColBySquareId(id) {\r\n        return (Math.floor(id / squaresPerCol))\r\n    }\r\n    function getSquareIdByRowCol(row, col) { \r\n        return (col * squaresPerCol + row);  \r\n    }\r\n    \r\n    \r\n    // FIRST level BOOLEAN LINE helpers             // Currently there is only a Square.js functional Component, however if I defined a Square Class I would think that I could turn these functions that take squareId as a parameter and turn them into something that 'reads better' like Square.isStartOfVerticalLine() written on the Square object so that it has built in access to the relevant squareId and can be used in a no-parameter fashion. ??? \r\n    function isStartOfVerticalLine(squareId) {\r\n        const rowNumber = getRowBySquareId(squareId);\r\n        return (squaresPerCol - rowNumber >= 4);\r\n    }\r\n    function isEndOfVerticalLine(squareId) {\r\n        // To check if a square is the end of a verticalLine we need its rowNumber.\r\n        // rowNumber has 0-based indexing. If we are in the 3rd row or above then return TRUE.\r\n        const rowNumber = getRowBySquareId(squareId);\r\n        return (rowNumber >= 3);\r\n    }\r\n    function isStartOfHorizontalLine(squareId) {\r\n        // To check if a square is the start of a horizontalLine we need its colNumber and the width of each row (squaresPerRow).\r\n        // The Columns are rendered by the Board with 0-based indexing and the left-most column is column 'zero'.\r\n        // HorizontalLines are defined as \"starting\" with their left-most square. If there are 3 MORE squares in the row to the right of it then return TRUE.\r\n        // colNumber has 0-based indexing. If we are in the 0-th row then the minimum squaresPerCol that should return true is 4\r\n        const colNumber = getColBySquareId(squareId);\r\n        return (squaresPerRow - colNumber >= 4);\r\n    }\r\n    function isStartOfUpslashLine(squareId) {\r\n        // A square is the Start Of an Upslash Line IFF it is BOTH the \"start\" of a vertical line AND the \"start\" of a horizontal line.  \r\n        return (isStartOfVerticalLine(squareId) && isStartOfHorizontalLine(squareId));\r\n    }\r\n    function isStartOfDownslashLine(squareId) {\r\n        // A square is the Start Of an Downslash Line IFF it is BOTH the \"end\" of a vertical line AND the \"start\" of a horizontal line.  \r\n        return (isEndOfVerticalLine(squareId) && isStartOfHorizontalLine(squareId));\r\n    }\r\n\r\n    \r\n    // Board to Column Helpers    \r\n    function getColumnStatus(colNumber, boardStatus) {\r\n        // console.log(`getColumnStatus called for colNumber: ${colNumber} and boardStatus ${boardStatus}`)\r\n        let fromSquareId = colNumber * squaresPerCol;\r\n        let toSquareId = fromSquareId + squaresPerCol;\r\n        // console.log(`getColumnStatus will slice boardStatus fromId: ${fromSquareId}   toId: ${toSquareId}`)\r\n        let columnStatus = boardStatus.slice(fromSquareId, toSquareId);\r\n        return columnStatus;\r\n    }\r\n    function lowestEmptySquareInCol(colStatus, colNumber) {\r\n        // console.log(`lowestEmptySquareInCol recieved props colStatus: ${colStatus} and colNumber: ${colNumber}`)\r\n        let lowestEmptyRow = colStatus.indexOf('empty');\r\n        let lowestEmptySquare = -1;   // Returning -1 indicates \"the requested column is Full.\"\r\n        if (lowestEmptyRow !== -1) {\r\n            lowestEmptySquare = getSquareIdByRowCol(lowestEmptyRow, colNumber)\r\n        } \r\n        return lowestEmptySquare;\r\n    }\r\n\r\n\r\n    // Get VALUES for creating a Turn Status object. \r\n    function getBoardStatus(moveList) {\r\n        let boardStatus = Array(totalSquares).fill('empty');\r\n        moveList.forEach((squareId, turnNumber) => {\r\n            if (turnNumber % 2 === 0) {\r\n                boardStatus.splice(squareId, 1, 'playerOne')\r\n            }\r\n            else {\r\n                boardStatus.splice(squareId, 1, 'playerTwo')\r\n            }\r\n        });\r\n        // console.log(`Board Status: ${boardStatus}`)\r\n        return boardStatus;\r\n    }\r\n    function getLineStatusMap(updatedMoveList) {\r\n        let turnNumber = updatedMoveList.length;   // turnNumbers are 0-indexed! When it is turn 0 there is still one status object in the history\r\n        if (turnNumber <= 0) {\r\n            console.error(`Given that is is turn zero you probably meant to use initialLineStatusMap(), not getLineStatusMap() `);\r\n            // return initialLineStatusMap()\r\n        }\r\n    \r\n        let previousLineStatusMap = history[turnNumber - 1].lineStatusMap;  // Start with the Map from the PREVIOUS turn\r\n        let updatedLineStatusMap = history[turnNumber - 1].lineStatusMap;   // Start with the Map from the PREVIOUS turn\r\n        let mostRecentPlayer = (turnNumber % 2 === 1) ? \"playerOne\" : \"playerTwo\";\r\n        let mostRecentSquareClaimed = updatedMoveList[turnNumber - 1];\r\n        \r\n        let linesToUpdate = squareIdToLineIdsMap.get(mostRecentSquareClaimed);\r\n        linesToUpdate.forEach(lineId => {\r\n            let previousLineStatus = previousLineStatusMap.get(lineId);\r\n            let updatedLineStatus;\r\n            if (mostRecentPlayer === \"playerOne\") {\r\n                updatedLineStatus = {\r\n                    'playerOne': ++previousLineStatus.playerOne,\r\n                    'playerTwo': previousLineStatus.playerTwo,\r\n                    'empty': --previousLineStatus.empty\r\n                }\r\n            }\r\n            else if (mostRecentPlayer === \"playerTwo\") {\r\n                updatedLineStatus = {\r\n                    'playerOne': previousLineStatus.playerOne,\r\n                    'playerTwo': ++previousLineStatus.playerTwo,\r\n                    'empty': --previousLineStatus.empty\r\n                }\r\n            }\r\n            else { console.error(`getLineStatusMap(moveList) is Broken.`) }\r\n            updatedLineStatusMap.set(lineId, updatedLineStatus);\r\n        });\r\n\r\n        // TESTING\r\n        console.log(`Testing getLineStatusMap for turnNumber ${turnNumber}.`)\r\n        console.log(`mostRecentPlayer: ${mostRecentPlayer} just claimed square ${mostRecentSquareClaimed}`)\r\n        printLinesToStatusMap(updatedLineStatusMap)\r\n        return updatedLineStatusMap;\r\n    }\r\n    function getGameStatus(turnNumber, lineStatusMap) {\r\n        // console.log(`GET GAME STATUS recieved lineStatusMap: `)\r\n        // printLinesToStatusMap(lineStatusMap);\r\n\r\n        \r\n        // There  are FIVE posssible Game Status values.  THREE cases where game is over.\r\n        if (playerOneWins(lineStatusMap)){\r\n            console.log(\"Player One Wins!\")\r\n            return 'playerOneWins';\r\n        }\r\n        else if (playerTwoWins(lineStatusMap)) {\r\n            console.log(\"Player Two Wins!\")\r\n            return 'playerTwoWins';\r\n        }\r\n        else if (gameDrawn(lineStatusMap)) {\r\n            console.log(\"Game Over. Draw.\")\r\n            return 'gameDrawn';\r\n        }\r\n        else if (playerOneToMove(turnNumber) === true) {\r\n            console.log(\"Player One to Move.\")\r\n            return 'playerOneToMove';\r\n        }\r\n        else if (playerOneToMove(turnNumber) === false) {\r\n            console.log(\"Player Two to Move.\")\r\n            return 'playerTwoToMove';\r\n        }\r\n        else {\r\n            console.error(`Invalid result in getGameStatus`);\r\n            return 1;\r\n        }\r\n    \r\n        // Internally uesd Helper Functions\r\n        function playerOneWins(lineStatusMap) {\r\n            let playerOnesMoveCounts = [];\r\n            lineStatusMap.forEach((lineStatus, lineId) => {\r\n                playerOnesMoveCounts = playerOnesMoveCounts.concat(lineStatus.playerOne);\r\n            });\r\n            // console.log(`Player One Move Counts: ${playerOnesMoveCounts}`)\r\n            return(playerOnesMoveCounts.includes(4))\r\n        }\r\n        function playerTwoWins(lineStatusMap) {\r\n            let playerTwosMoveCounts = [];\r\n            lineStatusMap.forEach((lineStatus, lineId) => {\r\n                playerTwosMoveCounts = playerTwosMoveCounts.concat(lineStatus.playerTwo);\r\n            });\r\n            // console.log(`Player One Move Counts: ${playerOnesMoveCounts}`)\r\n            return (playerTwosMoveCounts.includes(4))\r\n        }\r\n        function gameDrawn(lineStatusMap) {\r\n            let playerOnesMoveCounts = [];\r\n            lineStatusMap.forEach((lineStatus, lineId) => {\r\n                playerOnesMoveCounts = playerOnesMoveCounts.concat(lineStatus.playerOne);\r\n            });\r\n        \r\n            let playerTwosMoveCounts = [];\r\n            lineStatusMap.forEach((lineStatus, lineId) => {\r\n                playerTwosMoveCounts = playerTwosMoveCounts.concat(lineStatus.playerTwo);\r\n            });\r\n            // console.log(`Player One Move Counts: ${playerOnesMoveCounts}`)\r\n            return (!playerOnesMoveCounts.includes(0) && !playerTwosMoveCounts.includes(0))\r\n        }\r\n        function playerOneToMove(turnNumber) {\r\n            return (turnNumber % 2 === 0);\r\n        }    \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    // CLICK HANDLERS\r\n    function handleColumnClick(colNumber) {\r\n        console.log(`handleColumnClick has been called with colNumber: ${colNumber} and currentTurnNumber: ${currentTurnNumber} `)\r\n        let currentTurnStatus = history[currentTurnNumber];\r\n        let status = currentTurnStatus.gameStatus;\r\n        console.log(`Game Status before Handling Click : ${status}`)\r\n        // There are TWO reasons we might Return Early: \r\n        // (1) Game already over, \r\n        let gameIsOver = (status === 'playerOneWins' || status === 'playerTwoWins' || status === 'gameDrawn')\r\n        if (gameIsOver) {\r\n            console.log(`Returning Early from handleClick() since Game is already over!`)\r\n            return -1;\r\n        }\r\n        // (2) Clicked Column already full.\r\n        let boardStatus = currentTurnStatus.boardStatus;\r\n        let colStatus = getColumnStatus(colNumber, boardStatus);\r\n        // console.log(`Calling lowestEmptySquareInCol with colStatus: ${colStatus} and colNumber: ${colNumber}`)\r\n        let moveToAdd = lowestEmptySquareInCol(colStatus, colNumber);\r\n        console.log(`lowestEmptySquareInCol found square id: ${moveToAdd}`)\r\n        if (moveToAdd === -1) {\r\n            console.log(`Clicked column is already full!`)\r\n            return -1;\r\n        }  \r\n       \r\n        let updatedMoveList = currentTurnStatus.moveList.concat(moveToAdd);\r\n        let updatedTurnNumber = updatedMoveList.length;\r\n        let updatedLineStatusMap = getLineStatusMap(updatedMoveList);\r\n        let updatedGameStatus = getGameStatus(updatedTurnNumber, updatedLineStatusMap)\r\n        let newTurnStatus = {\r\n            \"turnNumber\": updatedMoveList.length,\r\n            \"moveList\": updatedMoveList,\r\n            \"boardStatus\": getBoardStatus(updatedMoveList),\r\n            \"lineStatusMap\": updatedLineStatusMap,\r\n            \"gameStatus\": updatedGameStatus\r\n        }\r\n        \r\n        console.log(`About to add newTurnStatus to the History array: `);\r\n        logTurnStatusObject(newTurnStatus);\r\n        \r\n        setHistory(history.concat(newTurnStatus));\r\n        setCurrentTurnNumber(++currentTurnNumber);\r\n\r\n        console.log(`Done Handling Click. It is now Turn Number ${currentTurnNumber} and the Game Status is: ${newTurnStatus.gameStatus}`);   // \r\n\r\n        // This is where we Would find and make the Computer Move if in Play vs. Computer Mode\r\n        return 0;\r\n    }\r\n    function handleUndoButtonClick() {\r\n        // const shortenedHistory = history.slice(0, history.length - 1)\r\n        // console.log(`handleUndoButtonClick() removed ${history[history.length - 1]} . New Shortened history: ${shortenedHistory}`);\r\n        // setHistory(shortenedHistory);\r\n    }\r\n    function handleNewGameButtonClick() {\r\n        setHistory([statusOnTurnZero]);\r\n        setCurrentTurnNumber(0);\r\n        console.log(`Starting a NEW GAME ***********`);\r\n    }\r\n\r\n    \r\n    \r\n    // PRINT TO CONSOLE FOR TESTING\r\n    function logMapElement(value, key) {\r\n        console.log(`Key lineId: ${key}   Value squareIdList: ${value}`);\r\n    }\r\n    function printLinesToStatusMap(map) {\r\n        map.forEach((status, lineId) => {\r\n            console.log(`LineId: ${lineId}  has status:  playerOne: ${status.playerOne}  playerTwo: ${status.playerTwo}  empty: ${status.empty}`);\r\n        });\r\n    }\r\n    function logTurnStatusObject(object) {\r\n        // console.log(`Turn Status Object:`);\r\n        console.log(`turnNumber: ${object.turnNumber}`);\r\n        console.log(`moveList: ${object.moveList}`);\r\n        console.log(`boardStatus: omitted Array(42)`);\r\n        // console.log(`lineStatusMap: ${printLinesToStatusMap(object.lineStatusMap)}`);\r\n        console.log(`gameStatus: ${object.gameStatus}`);\r\n    }\r\n    function logLineStatusObject(object) {\r\n        // console.log(`Turn Status Object:`);\r\n        console.log(`playerOne: ${object.playerOne}`);\r\n        console.log(`playerTwo: ${object.playerTwo}`);\r\n        console.log(`empty: ${object.empty}`);\r\n    }\r\n\r\n\r\n    // MAP MAKING FUNCTIONS\r\n    function getLineIdToSquareIdsMap() {\r\n        let completeMap = new Map();\r\n        let partialMaps = [verticalLineMap(), horizontalLineMap(), upslashLineMap(), downslashLineMap()]\r\n\r\n        partialMaps.forEach(partialMap => {\r\n            partialMap.forEach((squareIdList, lineId) => {\r\n                completeMap.set(lineId, squareIdList);\r\n            });\r\n        })\r\n        // CONFUSING point: For now I have just silenced the following console.log because it runs everytime handleColumnClick is called.  This means the map is being recreated from scratch each turn of the game unnecesarily. Perhaps I could solve this by moving the entire ClassicGame() inside a wrapper component that is strictly for holding complex CONSTANTS that ClassGame uses but only needs to compute once such as the Maps.\r\n        // console.log(`Generated Map of LineIds to the four SquareIds in each. There are ${completeMap.size} LineIds in the Map.`)\r\n        // completeMap.forEach(logMapElement);\r\n        // The following four HELPERS bear responsibility for corresponding the lists of squares to their correct final lineIds.  This is simple for vertical lines but requires consideartion of the startingId for the latter three. \r\n        function verticalLineMap() {\r\n            let map = new Map();\r\n            // Vertical Lines are assigned Ids starting from Zero.\r\n            let currentLineId = 0;\r\n\r\n            for (let squareId = 0; squareId < totalSquares; squareId++) {\r\n                if (isStartOfVerticalLine(squareId)) {\r\n                    let first = squareId + 0;\r\n                    let second = squareId + 1;\r\n                    let third = squareId + 2;\r\n                    let fourth = squareId + 3;\r\n                    let squaresInLine = [first, second, third, fourth];\r\n                    map.set(currentLineId, squaresInLine);\r\n                    currentLineId++;\r\n                }\r\n            }\r\n            return map;\r\n        }\r\n        function horizontalLineMap() {\r\n            let map = new Map();\r\n            // Horizontal Lines are assigned Ids starting from numberOfVerticalLines.\r\n            let currentLineId = numberOfVerticalLines;\r\n            for (let squareId = 0; squareId < totalSquares; squareId++) {\r\n                if (isStartOfHorizontalLine(squareId)) {\r\n                    let first = squareId + (0 * squaresPerCol);\r\n                    let second = squareId + (1 * squaresPerCol);\r\n                    let third = squareId + (2 * squaresPerCol);\r\n                    let fourth = squareId + (3 * squaresPerCol);\r\n                    let squaresInLine = [first, second, third, fourth];\r\n                    map.set(currentLineId, squaresInLine);\r\n                    currentLineId++;\r\n                }\r\n            }\r\n            return map;\r\n        }\r\n        function upslashLineMap() {\r\n            let map = new Map();\r\n            // Upslash Lines are assigned Ids starting from numberOfVerticalLines + numberOfHorizontalLines.\r\n            let currentLineId = numberOfVerticalLines + numberOfHorizontalLines;\r\n            for (let squareId = 0; squareId < totalSquares; squareId++) {\r\n                if (isStartOfUpslashLine(squareId)) {\r\n                    let first = squareId + 0 * (squaresPerCol + 1);\r\n                    let second = squareId + 1 * (squaresPerCol + 1);\r\n                    let third = squareId + 2 * (squaresPerCol + 1);\r\n                    let fourth = squareId + 3 * (squaresPerCol + 1);\r\n                    let squaresInLine = [first, second, third, fourth];\r\n                    map.set(currentLineId, squaresInLine);\r\n                    currentLineId++;\r\n                }\r\n            }\r\n            return map;\r\n        }\r\n        function downslashLineMap() {\r\n            let map = new Map();\r\n            // Downslash Lines are assigned Ids starting from numberOfVerticalLines + numberOfHorizontalLines + numberOfUpslashLines.\r\n            let currentLineId = numberOfVerticalLines + numberOfHorizontalLines + numberOfUpslashLines;\r\n            for (let squareId = 0; squareId < totalSquares; squareId++) {\r\n                if (isStartOfDownslashLine(squareId)) {\r\n                    let first = squareId + 0 * (squaresPerCol - 1);\r\n                    let second = squareId + 1 * (squaresPerCol - 1);\r\n                    let third = squareId + 2 * (squaresPerCol - 1);\r\n                    let fourth = squareId + 3 * (squaresPerCol - 1);\r\n                    let squaresInLine = [first, second, third, fourth];\r\n                    map.set(currentLineId, squaresInLine);\r\n                    currentLineId++;\r\n                }\r\n            }\r\n            return map;\r\n        }\r\n        return completeMap;\r\n    }\r\n    function getSquareIdToLineIdsMap() {\r\n        let squaresToLinesMap = new Map();\r\n        for (let squareId = 0; squareId < totalSquares; squareId++) {\r\n            squaresToLinesMap.set(squareId, []);\r\n        }\r\n        lineIdToSquareIdsMap.forEach((squaresList, lineId) => {\r\n            squaresList.forEach(squareId => {\r\n                squaresToLinesMap.set(squareId, squaresToLinesMap.get(squareId).concat(lineId));\r\n            })\r\n        })\r\n        // CONFUSING point: For now I have just silenced the following console.log because it runs everytime handleColumnClick is called.  This means the map is being recreated from scratch each turn of the game unnecesarily. Perhaps I could solve this by moving the entire ClassicGame() inside a wrapper component that is strictly for holding complex CONSTANTS that ClassGame uses but only needs to compute once such as the Maps.\r\n        // console.log(`Mapped each of the ${totalSquares} SquareIds to the set of all Lines that include it.`)\r\n        // squaresToLinesMap.forEach(logMapElement);\r\n        return squaresToLinesMap;\r\n    }\r\n    function initialLineStatusMap() {\r\n        let lineStatusMap = new Map();\r\n        for (let lineId = 0; lineId < totalNumberOfLines; lineId++) {\r\n            let status = {\r\n                'playerOne': 0,\r\n                'playerTwo': 0,\r\n                'empty': 4\r\n            }\r\n            lineStatusMap.set(lineId, status);\r\n        }\r\n        return lineStatusMap;\r\n    }\r\n    \r\n\r\n    let currentBoardStatus = history[currentTurnNumber].boardStatus;\r\n    \r\n    \r\n    return (\r\n        <Container\r\n            className={classes.root}\r\n            maxWidth='md'\r\n        >\r\n            <Navbar pageTitle={\"Classic Connect Four\"} />\r\n            <Paper className={classes.paper} >\r\n                \r\n                <Board \r\n                    boardStatus={currentBoardStatus}\r\n                    columnHeight= {6}\r\n                    handleColumnClick={handleColumnClick}\r\n                    getColumnStatus={getColumnStatus}\r\n                />\r\n\r\n                <Panel \r\n                    // panelStatus={getPanelStatus()}\r\n                    gameStatus=\"Status of Game\"\r\n                    handleUndoButtonClick={handleUndoButtonClick}\r\n                    handleNewGameButtonClick={handleNewGameButtonClick}\r\n                />\r\n\r\n            </Paper>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n\r\n// MUI  components\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        // backgroundColor: '#4AC9FD',\r\n        // overflow: 'scroll',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        height: '400px',\r\n    },\r\n    \r\n\r\n}));\r\n\r\n\r\nexport default function MultiplicationGame() {\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n\r\n    // What distinguishes Math from Science?\r\n    //    sci... Math...\r\n    //  Bottom Line: Proof vs evidence. \r\n    // What does Tic Tac Toe have to do with this?\r\n    // --play now button\r\n    // What is the Fifteen Game?\r\n\r\n    return (\r\n        <Container\r\n            className={classes.root}\r\n            maxWidth='md'\r\n        >\r\n\r\n\r\n            <Paper className={classes.paper} >\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </Paper>\r\n        </Container>\r\n    );\r\n}","import {\r\n    createMuiTheme,\r\n    responsiveFontSizes,\r\n} from '@material-ui/core/styles';\r\n\r\n\r\n\r\nimport yellow from '@material-ui/core/colors/yellow';\r\nimport red from '@material-ui/core/colors/red';\r\n// import { Button, createStyles } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#b3e5fc',\r\n            main: '#2962ff',\r\n            dark: '#0039cb',\r\n        },\r\n        player1: red,\r\n        player2: yellow,\r\n    },\r\n    status: {\r\n        danger: 'orange',\r\n    },\r\n    shape: {\r\n        borderRadius: 8,\r\n    }\r\n\r\n});\r\n\r\nexport default responsiveFontSizes(theme);","import React from 'react';\nimport {\n    HashRouter as Router,\n    Link as RouterLink,\n    Route,\n    Switch\n} from \"react-router-dom\";\n\n\n\n// My Components & Pages\nimport Navbar from './components/Navbar';\nimport WelcomePage from \"./pages/WelcomePage\";\nimport ClassicGame from './pages/ClassicGame';\nimport MultiplicationGame from './pages/MultiplicationGame';\n\n// MUI  components\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\n// import Button from '@material-ui/core/Button';\n// import Menu from '@material-ui/core/Menu';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import MenuIcon from '@material-ui/icons/Menu';\n// import AppBar from '@material-ui/core/AppBar'\nimport Typography from '@material-ui/core/Typography'\n\nimport './App.css';\nimport theme from \"./theme\";\nimport {\n    makeStyles,\n    ThemeProvider\n} from '@material-ui/core/styles';\n\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: 'auto',\n        minHeight: '100vh',\n        width: '100vw',\n        minWidth: '400px',\n        \n        // backgroundColor: theme.palette.common.white,\n        // backgroundColor: theme.palette.primary.light,\n        backgroundColor: '#b3e5fc',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'top',\n\n    },\n\n\n}));\n\n\nexport default function App() {\n    const classes = useStyles();\n    // const [pageTitle, setPageTitle] = React.useState(\"Welcome\");\n\n    const [pageTitle, setPageTitle] = React.useState(\"Welcome\");\n\n    // Similar to componentDidMount and componentDidUpdate:\n    React.useEffect(() => {\n        // Update the document title using the browser API\n        // document.title = `You clicked ${count} times`;\n\n    });\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <ThemeProvider theme={theme}>\n                <Box className={classes.root}>\n                    <Router>\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <WelcomePage />\n                            </Route>\n\n                            <Route path=\"/classic_mode\">\n                                <ClassicGame />\n                            </Route>\n\n                            <Route path=\"/multiplication_mode\">\n                                <Navbar pageTitle={\"Multiplication Fact Connect Four\"} />\n                                <MultiplicationGame />\n                            </Route>\n\n                        </Switch>\n                    </Router>\n                    {/* <Footer /> */}\n                </Box>\n            </ThemeProvider>\n        </React.Fragment>\n        \n        \n        \n    );\n}\n\nfunction Footer() {\n    const classes = useStyles();\n\n    return (\n        <Box className={classes.footer} >\n            <Typography className={classes.footerText} noWrap >\n                Produced by the Nola Stem Garden\n            </Typography>\n        </Box>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}